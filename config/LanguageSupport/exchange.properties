## Exchange Schema:
# Schema names must be unique in declarations of the form:
#     scheme.<schemeName> = <dataType> (, <dataType>)*
# Note that data types of 1,000 or higher always indicate auxiliary schemes.
# Each scheme declares its own modules using lines with this format:
#     <schemeName>.<moduleType> = <moduleName>
# Notifiers and auxiliary schemes take comma-separated lists of module names.
# Optionally, each scheme may declare special settings with the format:
#     <schemeName>.<variable> = <value>
# Each scheme may declare optional import or export settings with the format: 
#     <schemeName>.(import|export).<moduleName>.<variable> = <value>
# Each module may declare optional import or export settings with:
#     <moduleName>.(import|export).<variable> = <value>
# Scheme-specific settings override generic module settings.
# Any scheme may inherit settings from a single parent, using an isA link.
# Any scheme may contain one or more helper schema, using a hasA link


# For customers using MS SQL databases, the system can hang during asset
# import operations. To stop this from happening uncomment the following
# three properties. For Oracle customers these properties should be left
# commented out.
#accessor.WWBAssets.import.DbVendor = MsSql
#accessor.TradosAssets.import.DbVendor = MsSql
#accessor.SDLXAssets.import.DbVendor = MsSql

# Controls the handling of TRADOS XTranslated Units
# Be default we allow xtranslated units to be imported
enforceXTranslatedUnit=false

# We display a warning message when an XTranslated Unit is found that has been
# translated by vendor - but if this is the usual case then customer may want
# to suppress this message.
displayXtranslatedWarning=true

# Controls the TM export type selected by default on WSXZ export. Possible values: content, link, content_and_link. When not set the default is "content".
#export.wsxz.tm.type.default = content

# Controls if the export of translation kit will be backward compatible with previous than 10.4 version. The
# backward compatible version will contain Idiom.tmx file. Using the backward compatible option will affect the
# export performance
export_backward_compatible_package=false

# Default slice size.
accessor.TradosAssets.import.sliceSize = 50000
accessor.TradosAssets.export.sliceSize = 50000
accessor.SDLXAssets.import.sliceSize = 50000
accessor.SDLXAssets.export.sliceSize = 50000

# These flags display/hide translation kit format selections on the Export
# Assets/Task dialog in WorldServer. A value of true make the translation kit
# format available for export.
XlzFormat=true
XliffFormat=true
WsxzFormat=true
TradosTtxFormat=false
BilingualDocxFormat=true
RegulatorBundleFormat=true

# This option determines the segment layout of a Bilingual DOCX
# file. The possible values are "TopDown" or "SideBySide".
bdx.segment.layout=SideBySide

# The following options determine the backgroud colors of the segments
# in each TM match status in a Bilingual DOCX file. Any color
# names that are defined in a .NET System.Drawing.Color class can be
# used.
bdx.IceMatchColor=LightGray
bdx.ExactMatchColor=PaleGreen
bdx.FuzzyMatchColor=Wheat
bdx.NoMatchColor=White

# true: rolls back the import of any asset for which a
#       placeholder mismatch error is detected.
#
# false: imports all valid segments except those for which
#        errors or exceptions are detected (Default)
catasset.failOnError=false

# true: rolls back the import of any asset that contains a segment that
#       violates the maximum segment constraint. (Default)
#
# false: imports all valid segments except those for which a maximum segment
#        constraint violation is detected.
catasset.failOnError.MaxSegmentLength=true

# By default WorldServer exports TMX version 1.4.
# However, this value can be set to 1.2 in case a third party tool
# that must read the TMX file cannot accept version 1.4.
IdiomTmxVersion=1.4

# Specifies whether WorldServer exports legacy WorldServer 9.x or Studio-style
# TMX flavor.
# Permitted values are "worldserver9x" or "studio".
# By default, Studio TMX is exported.
# NOTE: The legacy WorldServer 9.x TMX format is not recommended because it does
# not round-trip essential Translation Unit tag information required by WS 10.0.
#IdiomTmxFlavor=studio


# TM segment export level for Studio(WSXZ) kits.
# Valid values are 1, 2, 3, 4 (default).
# For other kits, use the property tmSegmentExportLevel instead.
#
# A setting of 4 ensures that WorldServer scoping reports are consistent with
# Studio analysis results.
#
# Please refer to the WorldServer Administration Guide for details
# about how each level controls segment export.
studioTmSegmentExportLevel=4

# TM segment export level for other kits.
# Valid values are 1 (default), 2, 3, 4. 
# For Studio(WSXZ) kits, use the property studioTmSegmentExportLevel instead. 
#
# Please refer to the WorldServer Administration Guide for details
# about how each level controls segment export.
tmSegmentExportLevel=1

# This parameter controls the type of filter that is used for segment alignment
# in the Translation Memory import process. By default the HTML filter is used
# because most TMX files do not accurately represent the type of data from which
# the TMX segments are derived. Because of the above-mentioned
# misrepresentation, it can be dangerous to set this value to true unless you
# are absolutely certain that the datatype attribute is correct.
determineFilterUsingDatatype=false

# When set to true (the default value) private use characters are dropped on
# read and turned into a question mark (?) on write.
# When set to false those characters are preserved.
# For more information in character sets see
# http://www.w3.org/TR/2000/REC-xml-20001006#charsets
dropPrivateCharacters=true;

# Controls if ICE matches in Xliff exports will be marked as translate=no in
# the translation-unit element. This would let smart xliff editors ignore the
# translation unit altogether (so it will not show up in word counts, etc).
# This means that the translation unit has an ICE match behind it and should not
# be edited by external translators.
# By default, ICE matches will not be marked in this way.
xliff.markICEMatchesAsTranslated=false

# This property determines if checks are performed prior to kit background
# import job submission in order to reject identical job submissions
# (generated by uploading the same kit multiple times before the previous
#  jobs have been picked up by any background engine in the cluster).
#
# This property is only for kit import background jobs that do not originate
# in DWB. For DWB, configure property dwb.disableSimultaneousBackgroundImports
# instead.
#
# This is to avoid the scenario where there are multiple submissions of
# conflicting jobs that can be simultaneously picked up in the cluster
# by multiple background daemons, causing potential deadlock situations,
# or data loss because serial order of execution for identical jobs is
# not guaranteed when multiple daemons are running.
#
# Default system behavior is that simultaneous kit background imports
# are allowed.
disableSimultaneousBackgroundImports=false

# This property determines if checks are performed prior to DWB background
# import job submission in order to reject identical job submissions
# (generated by uploading the same kit multiple times before the previous
#  jobs have been picked up by any background engine in the cluster).
#
# This is to avoid the scenario where there are multiple submissions of
# conflicting jobs that can be simultaneously picked up in the cluster
# by multiple background daemons, causing potential deadlock situations,
# or data loss because serial order of execution for identical jobs is
# not guaranteed when multiple daemons are running.
#
# Default system behavior is that simultaneous DWB background imports
# are not allowed.
dwb.disableSimultaneousBackgroundImports=true

# Controls which custom AIS properties are included in XLIFF/XLZ translation kits
# (WS 9.0.0 and later).
# By default, this property is unset and no AIS properties are exported.
# In future, this configuration will be supported in the WorldServer UI.
#
# ais_properties_included_in_translation_kits=prop1,prop2,prop3

# Controls if Machine Translation matches are exported in XLIFF/XLZ translation kits
# (WS 9.0.0 and later).
# By default, machine translation matches are not exported.
# This should only be turned on when Desktop Workbench support for Machine Translation
# is available. (Until then, DWB will treat alt-trans MT matches like TM matches which
# will cause problems)
#
export_machine_translation_matches=false

scheme.termdb = 1
termdb.packageRequired = false
termdb.notifiers = notifiers.Default
termdb.accessor = accessor.CSV
termdb.formatters = formatter.CSVFormatter
termdb.packager = packager.Zip
termdb.transporter = transporter.Standard

# Terms DB duplicate handling
#
# These parameters control handling of duplicate term entries on import. Setting
# termdb.import.preventDuplicates=true will enable duplicate detection, 
# preventing duplication of term entries on import. 
#
# termdb.import.checkAttributes=true means the values of term and term entry 
# attributes are significant in determining whether two term entries are 
# duplicates. Otherwise, WorldServer will only compare the terms. 
#
# termdb.import.overwriteAttributes=true means WorldServer replace the term 
# and term entry attributes of the term entry in the DB with the attributes of 
# a duplicate import term entry, if any. Otherwise, the existing attributes
# will be left alone.
#
# The termdb.import.checkAttributes and termdb.import.overwriteAttributes 
# parameters have no effect if termdb.import.preventDuplicates is false.
#  
termdb.import.preventDuplicates = true
termdb.import.checkAttributes = true
termdb.import.overwriteAttributes = true

# Terms DB MultiTerm I/O

scheme.multiTerm = 1
multiTerm.packageRequired = false
multiTerm.notifiers = notifiers.Default
multiTerm.accessor = accessor.MultiTerm
multiTerm.formatters = formatter.MultiTermFormatter
multiTerm.packager = packager.Zip
multiTerm.transporter = transporter.Standard

# Terms DB MultiTerm PreScan
scheme.multiTermScan = 1
multiTermScan.packageRequired = false
multiTermScan.notifiers = notifiers.Default
multiTermScan.accessor = accessor.MultiTermLanguages
multiTermScan.formatters = formatter.MultiTermPreScanner
multiTermScan.packager = packager.Zip
multiTermScan.transporter = transporter.Standard


# Translation Memory I/O

scheme.tmxScan = 2
tmxScan.packageRequired = false
tmxScan.notifiers = notifiers.Default
tmxScan.accessor = accessor.TMXLanguages
tmxScan.formatters = formatter.TMXPreScanner
tmxScan.packager = packager.Zip
tmxScan.transporter = transporter.Standard

scheme.tm = 2
tm.packageRequired = false
tm.notifiers = notifiers.Default
tm.accessor = accessor.Translations
tm.formatters = formatter.TMX
tm.packager = packager.Zip
tm.transporter = transporter.Standard

# Assets Trados CAT I/O

scheme.trados = 0
trados.packageRequired = true
trados.notifiers = notifiers.Default
trados.accessor = accessor.TradosAssets
trados.formatters = formatter.XML
trados.packager = packager.Zip
trados.transporter = transporter.Standard
trados.hasA = scheme.tm, scheme.multiTerm

scheme.regulatorBundle = 0

# Assets Trados CAT I/O
# This scheme supports exclusion of ICE Matches from export
scheme.tradosChangedOnly = 0
tradosChangedOnly.isA=trados
tradosChangedOnly.export.accessor.changed_only = true

# Assets Trados CAT I/O
# This scheme supports exclusion of ICE and 100% matches from export
# by default this scheme is commented out in the shipped product.
scheme.tradosChangedOnly_100 = 0
tradosChangedOnly_100.isA=trados
tradosChangedOnly_100.export.accessor.changed_only_100 = true

# Assets SDLX CAT I/O

scheme.sdlx = 0
sdlx.packageRequired = true
sdlx.notifiers = notifiers.Default
sdlx.accessor = accessor.SDLXAssets
sdlx.formatters = formatter.XML
sdlx.packager = packager.Zip
sdlx.transporter = transporter.Standard
sdlx.hasA = scheme.sdlxTm

# Assets Windows workbench I/O

scheme.windowsWB = 0
windowsWB.packageRequired = true
windowsWB.packageExtension = idz
#++ WindowsWB.combinedItem = docs
windowsWB.notifiers = notifiers.Default
windowsWB.accessor = accessor.WWBAssets
windowsWB.formatters = formatter.XML
windowsWB.export.formatter.indentation = 0
windowsWB.packager = packager.Zip
windowsWB.transporter = transporter.Standard
windowsWB.hasA = scheme.wwbTM, scheme.terms

## Auxiliary Schema:

# Term Matches for CAT Tools
scheme.terms = 1001
terms.isA = scheme.termdb
terms.formatters = formatter.XML
terms.export.formatter.indentation = 0

# TM Matches for SDLX
scheme.sdlxTm = 1002
sdlxTm.isA = scheme.tm
sdlxTm.export.accessor.omitPlaceholders = true
sdlxTm.export.formatter.encoding = UnicodeLittle

# TM Matches for WWB
scheme.wwbTM = 1002
wwbTM.isA = scheme.tm
wwbTM.accessor = accessor.TreeTranslations
wwbTM.formatters = formatter.XML
wwbTM.export.formatter.indentation = 0


## Bootstrap Schema:

# Assets Bootstrap 

scheme.bootstrap
bootstrap.description = exchange.scheme.bootstrap.description
bootstrap.notifiers = notifiers.Default
bootstrap.transporter = transporter.Standard


## Exchange Modules and Configuration Settings:

# Notifiers

notifiers.Default = com.idiominc.ws.exchange.notifier.Default

# Accessors

accessor.Translations = com.idiominc.ws.exchange.accessor.Translations
accessor.TreeTranslations = com.idiominc.ws.exchange.accessor.TreeTranslations
accessor.TMXLanguages = com.idiominc.ws.exchange.accessor.TMXLanguages
accessor.CSV = com.idiominc.ws.exchange.accessor.CSV
accessor.MultiTerm = com.idiominc.ws.exchange.accessor.MultiTerm
accessor.MultiTermLanguages = com.idiominc.ws.exchange.accessor.MultiTermLanguages
accessor.TradosAssets = com.idiominc.ws.exchange.accessor.TradosAssets
accessor.SDLXAssets = com.idiominc.ws.exchange.accessor.SDLXAssets
accessor.WWBAssets = com.idiominc.ws.exchange.accessor.WWBAssets


# Formatters

formatter.TMX = com.idiominc.ws.exchange.formatter.TMX
formatter.TMXPreScanner = com.idiominc.ws.exchange.formatter.TMXPreScanner
formatter.CSVFormatter = com.idiominc.ws.exchange.formatter.CSVFormatter
formatter.MultiTermFormatter = com.idiominc.ws.exchange.formatter.MultiTermFormatter
formatter.MultiTermPreScanner = com.idiominc.ws.exchange.formatter.MultiTermPreScanner
formatter.XML = com.idiominc.ws.exchange.formatter.XML

# Packagers

packager.Zip = com.idiominc.ws.exchange.packager.Zip

# Transporters

transporter.Standard = com.idiominc.ws.exchange.transporter.Standard
#transporter.Standard.export.maxTimeout = 45


## Test Schema

# Unit Test I/O

scheme.ioTest = 1
ioTest.isA = scheme.ioTest
ioTest.notifiers = notifiers.Default
ioTest.accessor = accessor.IOTest
ioTest.formatters = formatter.CSVFormatter
ioTest.packager = packager.Zip
ioTest.transporter = transporter.Standard
ioTest.hasA = scheme.ioTest

scheme.io2Test = 1001
io2Test.isA = scheme.ioTest
io2Test.packageRequired = false
io2Test.formatters = formatter.XML
io2Test.hasA = scheme.ioTest

accessor.IOTest = com.idiominc.ws.exchange.accessor.IOTest

# Unit Test Terms DB

scheme.termdbTest = 1
termdbTest.packageRequired = false
termdbTest.notifiers = notifiers.Default
termdbTest.accessor = accessor.CSV
termdbTest.formatters = formatter.XML
termdbTest.packager = packager.Zip
termdbTest.transporter = transporter.Standard

dfTermDelimiters=! $ ^

# Configure custom TD import/export XSLT-based transforms. Each import/export
# format consists of 4 comma separated fields: format name, description, 
# xslt file to invoke and (optionally) the file extension. Semicolons separate
# each format description.
#termdb.xslt_importer=exchange.process.acrocheck_olif.format, \
#	exchange.process.acrocheck_olif.description, \
#	olif2tbx.xsl; \
#	exchange.process.multiterm_xml.format, \
#	exchange.process.multiterm_xml.description, \
#	multiterm2tbx-convertor.xsl
#termdb.xslt_exporter=exchange.process.acrocheck_olif.format, \
#	exchange.process.acrocheck_olif.description, \
#	tbx2olif.xsl; \
#   exchange.process.multilingual_html.format, \
#	exchange.process.multilingual_html.description, \
#	tbx2multilingual_html.xsl, \
#   html


# Controls locale mapping between WorldServer and Trados
# TagEditor. WorldServer and Trados TagEditor use different locale
# code for some locales, which causes that TTX files exported from
# WorldServer cannot be opened in TagEditor. The following mappings
# solves the problem.
#
# Each property defines a mapping of one locale. A value of a property
# consists of a WorldServer language name, followed by a comma (,),
# followed by a Trados locale code. Spaces are allowed before and
# after a comma. A key of a property must start with
# "tradosLocaleMapping" and immediately followed by a number, or any
# other characters allowed for Java property key string. The purpose
# of the additional characters is to make the keys unique.

tradosLocaleMapping1 = Spanish (Modern Sort), es-EM
tradosLocaleMapping2 = Serbian (Latin), sh-SR
tradosLocaleMapping3 = Serbian (Cyrillic), sh-YU
tradosLocaleMapping4 = Filipino, tl
tradosLocaleMapping5 = Croatian, sh-HR
tradosLocaleMapping6 = Armenian, am

# Controls locale mapping between WorldServer and Trados Studio
# 2009. WorldServer and Trados Studio 2009 use different locale code
# for some locales, which may cause that WorldServer translation kit
# cannot be opened in Trados Studio 2009. The following mappings
# solves the problem.
#
# Each property defines a mapping of one locale. A value of a property
# consists of a WorldServer language name, followed by a comma (,),
# followed by a Trados Studio 2009 locale code, which is the same as
# the one used in .NET environment. Spaces are allowed before and
# after a comma. A key of a property must start with
# "studioLocaleMapping" and immediately followed by a number, or any
# other characters allowed for Java property key string. The purpose
# of the additional characters is to make the keys unique.

studioLocaleMapping1 = Amharic, am-ET
studioLocaleMapping2 = Assamese, as-IN
studioLocaleMapping3 = Azeri (Cyrillic), az-Cyrl-AZ
studioLocaleMapping4 = Azeri (Latin), az-Latn-AZ
studioLocaleMapping5 = Bengali, bn-IN
studioLocaleMapping6 = Bosnian (Cyrillic), bs-Cyrl-BA
studioLocaleMapping7 = Bosnian (Latin), bs-Latn-BA
studioLocaleMapping8 = Divehi, dv-MV
studioLocaleMapping9 = English (Caribbean), en-029
studioLocaleMapping10 = Frisian (Netherlands), fy-NL
studioLocaleMapping11 = Gaelic (Ireland), ga-IE
studioLocaleMapping12 = Gaelic (Scotland), gd-GB
studioLocaleMapping13 = Hausa, ha-Latn-NG
studioLocaleMapping14 = Igbo, ig-NG
studioLocaleMapping15 = Inukitut, iu-Latn-CA
studioLocaleMapping16 = Khmer, km-KH
studioLocaleMapping17 = North Sotho (Sepedi), nso-ZA
studioLocaleMapping18 = Pashto, ps-AF
studioLocaleMapping19 = Quechua (Bolivia), quz-BO
studioLocaleMapping20 = Quechua (Peru), quz-PE
studioLocaleMapping21 = Quichua (Ecuador), quz-EC
studioLocaleMapping22 = Rhaeto-Romanic, rm-CH
studioLocaleMapping23 = Rwanda, rw-RW
studioLocaleMapping24 = Sami Lappish, se-NO
studioLocaleMapping25 = Serbian (Cyrillic), sr-Cyrl-CS
studioLocaleMapping26 = Serbian (Latin), sr-Latn-CS
studioLocaleMapping27 = South Sotho (Sesotho), nso-ZA
studioLocaleMapping28 = Syriac, syr-SY
studioLocaleMapping29 = Tajik, tg-Cyrl-TJ
studioLocaleMapping30 = Tamazight (Latin), tzm-Latn-DZ
studioLocaleMapping31 = Tswana, tn-ZA
studioLocaleMapping32 = Uzbek (Cyrillic), uz-Cyrl-UZ
studioLocaleMapping33 = Uzbek (Latin), uz-Latn-UZ
studioLocaleMapping34 = Welsh, cy-GB
studioLocaleMapping35 = Xhosa, xh-ZA
studioLocaleMapping36 = Yoruba, yo-NG
studioLocaleMapping37 = Indonesian, id-ID
studioLocaleMapping38 = Spanish (International Sort), es-ES
studioLocaleMapping39 = Alsatian (France), gsw-FR
studioLocaleMapping40 = Bashkir (Russia), ba-RU
studioLocaleMapping41 = Breton (France), br-FR
studioLocaleMapping42 = English (Hong Kong), en-HK
studioLocaleMapping43 = Inuktitut (Syllabics) (Canada), iu-Cans-CA
studioLocaleMapping44 = K'iche (Guatemala), qut-GT
studioLocaleMapping45 = Maori (New Zealand), mi-NZ
studioLocaleMapping46 = Mapudungun (Chile), arn-CL
studioLocaleMapping47 = Mohawk (Canada), moh-CA
studioLocaleMapping48 = Occitan (France), oc-FR
studioLocaleMapping49 = Upper Sorbian (Germany), hsb-DE
studioLocaleMapping50 = Uyghur (PRC), ug-CN
studioLocaleMapping51 = Oromo, om-ET
studioLocaleMapping52 = Burmese, my-MM

